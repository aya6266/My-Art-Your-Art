{"version":3,"sources":["components/Title.jsx","components/ProgressBar.jsx","components/UploadForm.jsx","firebase/config.js","hooks/useStorage.jsx","hooks/useFirestore.jsx","components/ImageGrid.jsx","components/Modal.jsx","App.jsx","index.jsx"],"names":["Title","className","ProgressBar","progress","useContext","AppContext","div","initial","width","animate","UploadForm","handleChange","error","file","htmlFor","for","type","id","onChange","name","projectStorage","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getStorage","projectFirestore","getFirestore","useStorage","useState","setProgress","setError","url","setUrl","useEffect","storageRef","ref","uploadTask","uploadBytesResumable","collectionRef","collection","promiseSetter","a","on","snapshot","percentage","bytesTransferred","totalBytes","err","getDownloadURL","currUrl","serverTimestamp","createdAt","addDoc","useFirestore","col","docs","setDocs","db","q","query","orderBy","console","log","unsub","onSnapshot","documents","map","doc","push","data","ImageGrid","handleClickImage","layout","key","whileHover","opacity","cursor","onClick","img","src","alt","transition","delay","Modal","selectedImg","handleBackDrop","e","y","stopPropagation","createContext","App","setFile","setSelectedImg","types","Provider","value","selected","target","files","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfa66635.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { GiHammerSickle } from \"react-icons/gi\";\r\nimport \"./title.css\";\r\nconst Title = () => {\r\n  return (\r\n    <div className=\"title\">\r\n      <h2>My Art Your Art</h2>\r\n      <div className=\"hammer\">\r\n        <GiHammerSickle />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../App\";\r\nimport { motion } from \"framer-motion/dist/framer-motion\";\r\n\r\nimport \"./progressBar.css\";\r\nconst ProgressBar = () => {\r\n  const { progress } = useContext(AppContext);\r\n  return (\r\n    <motion.div\r\n      className=\"progress__bar\"\r\n      initial={{ width: 0 }}\r\n      animate={{ width: progress + \"%\" }}\r\n    ></motion.div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../App\";\r\nimport \"./uploadForm.css\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nconst UploadForm = () => {\r\n  const { handleChange, error, file } = useContext(AppContext);\r\n  return (\r\n    <form>\r\n      <label htmlFor=\"\" for=\"add__photo\">\r\n        <input type=\"file\" id=\"add__photo\" onChange={handleChange} />+\r\n      </label>\r\n      <div className=\"output\">\r\n        {error && <div className=\"error\">{error}</div>}\r\n        {file && <div className=\"file\">{file.name}</div>}\r\n        {file && <ProgressBar />}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n","import { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\nimport { getStorage } from \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAWBtaQrDPt_5pqvfDmoq4OCS7Gm00B3Bk\",\r\n  authDomain: \"instaclone-6bfc6.firebaseapp.com\",\r\n  projectId: \"instaclone-6bfc6\",\r\n  storageBucket: \"instaclone-6bfc6.appspot.com\",\r\n  messagingSenderId: \"77287110074\",\r\n  appId: \"1:77287110074:web:655c23487caafac5a3d983\",\r\n  measurementId: \"G-CN0Q0FGH9M\",\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = getStorage();\r\nconst projectFirestore = getFirestore();\r\n\r\nexport { projectFirestore, projectStorage };\r\n","import { useState, useEffect } from \"react\";\r\nimport { projectStorage, projectFirestore } from \"../firebase/config\";\r\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\nimport { collection, addDoc, serverTimestamp } from \"firebase/firestore\";\r\n\r\n//handle file uploads\r\n\r\nconst useStorage = (file) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  const [url, setUrl] = useState(null);\r\n\r\n  useEffect(() => {\r\n    //references to a file inside the default firestorage bucket\r\n    // console.log(projectStorage);\r\n    // const collectionRef = projectFirestore.collection(\"images\");\r\n\r\n    if (file !== null) {\r\n      const storageRef = ref(projectStorage, file.name);\r\n      const uploadTask = uploadBytesResumable(storageRef, file);\r\n      const collectionRef = collection(projectFirestore, \"image\");\r\n\r\n      uploadTask.on(\r\n        \"state_changed\",\r\n        (snapshot) => {\r\n          let percentage =\r\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n          setProgress(percentage);\r\n        },\r\n        (err) => {\r\n          setError(err);\r\n        },\r\n        async () => {\r\n          const currUrl = await getDownloadURL(uploadTask.snapshot.ref);\r\n          await promiseSetter(currUrl);\r\n          const createdAt = await serverTimestamp();\r\n          await addDoc(collectionRef, { url: currUrl, createdAt });\r\n        }\r\n      );\r\n\r\n      async function promiseSetter(url) {\r\n        setUrl(url);\r\n      }\r\n\r\n      //   //(async) uploads the files to the ref\r\n      //   storageRef.put(file).on(\r\n      //     \"state_changed\",\r\n      //     (snap) => {\r\n      //       let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n      //       setProgress(percentage);\r\n      //     },\r\n      //     (err) => setError(err),\r\n      //     async () => {\r\n      //       const url = await storageRef.getDownloadURL();\r\n      //       setUrl(url);\r\n      //     }\r\n      //   );\r\n    }\r\n  }, [file]);\r\n  return { progress, url, error };\r\n};\r\n\r\nexport default useStorage;\r\n","import {\r\n  collection,\r\n  query,\r\n  orderBy,\r\n  onSnapshot,\r\n  doc,\r\n  getDocs,\r\n  querySnapshot,\r\n  limit,\r\n} from \"firebase/firestore\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { projectFirestore } from \"../firebase/config\";\r\n\r\nconst useFirestore = (col) => {\r\n  const [docs, setDocs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // async function fetchData() {\r\n    //   const querySnapshot = await getDocs(\r\n    //     collection(projectFirestore, col),\r\n    //     orderBy(\"createAt\", \"desc\")\r\n    //   );\r\n    //   console.log({ querySnapshot });\r\n    //   let documents = [];\r\n    //   querySnapshot.forEach((doc) => {\r\n    //     documents.push({ ...doc.data(), id: doc.id });\r\n    //   });\r\n    //   setDocs(documents);\r\n    // }\r\n\r\n    // const unsub = fetchData();\r\n    // // return () => unsub;\r\n\r\n    // const q = query(\r\n    //   collection(projectFirestore, col),\r\n    //   orderBy(\"createAt\", \"desc\")\r\n    // );\r\n    // console.log({ q });\r\n    // const unSub = onSnapshot(q, (querySnapshot) => {\r\n    //   const documents = [];\r\n    //   querySnapshot.forEach((doc) => {\r\n    //     console.log(doc);\r\n    //     documents.push({ ...doc.data(), id: doc.id });\r\n    //   });\r\n    //   setDocs(documents);\r\n    // });\r\n\r\n    const db = collection(projectFirestore, col);\r\n    const q = query(db, orderBy(\"createdAt\", \"desc\"));\r\n    console.log(q);\r\n    const unsub = onSnapshot(q, (snapshot) => {\r\n      let documents = [];\r\n      snapshot.docs.map((doc) => {\r\n        documents.push({ ...doc.data(), id: doc.id });\r\n      });\r\n\r\n      setDocs(documents);\r\n    });\r\n\r\n    return () => unsub;\r\n  }, [col]);\r\n  return { docs };\r\n};\r\n\r\nexport default useFirestore;\r\n","import React from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { AppContext } from \"../App\";\r\nimport useFirestore from \"../hooks/useFirestore\";\r\nimport \"./imageGrid.css\";\r\nimport { motion } from \"framer-motion/dist/framer-motion\";\r\n\r\nconst ImageGrid = () => {\r\n  const { docs } = useFirestore(\"image\");\r\n\r\n  const { handleClickImage } = useContext(AppContext);\r\n  return (\r\n    <div className=\"img__grid\">\r\n      {docs &&\r\n        docs.map((doc) => {\r\n          return (\r\n            <motion.div\r\n              layout\r\n              className=\"img__wrap\"\r\n              key={doc.id}\r\n              whileHover={{ opacity: 1, cursor: \"pointer\" }}\r\n              onClick={() => handleClickImage(doc.url)}\r\n            >\r\n              <motion.img\r\n                src={doc.url}\r\n                alt=\"Nightmare\"\r\n                initial={{ opacity: 0 }}\r\n                animate={{ opacity: 1 }}\r\n                transition={{ delay: 1 }}\r\n              />\r\n            </motion.div>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageGrid;\r\n","import React from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { AppContext } from \"../App\";\r\nimport \"./modal.css\";\r\nimport { motion } from \"framer-motion/dist/framer-motion\";\r\n\r\nconst Modal = () => {\r\n  const { selectedImg, handleBackDrop } = useContext(AppContext);\r\n  return (\r\n    <motion.div\r\n      className=\"backdrop\"\r\n      onClick={(e) => handleBackDrop(e)}\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n    >\r\n      <motion.img\r\n        initial={{ y: \"-100vh\" }}\r\n        animate={{ y: \"0\" }}\r\n        src={selectedImg}\r\n        alt=\"Larger element\"\r\n        onClick={(e) => e.stopPropagation()}\r\n      />\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport Title from \"./components/Title\";\r\nimport UploadForm from \"./components/UploadForm\";\r\nimport useStorage from \"./hooks/useStorage\";\r\n\r\nimport { createContext, useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport ImageGrid from \"./components/ImageGrid\";\r\nimport Modal from \"./components/Modal\";\r\n\r\n//appcontexts for useContext\r\nexport const AppContext = createContext();\r\n\r\nfunction App() {\r\n  //state orgisiation\r\n  //file state\r\n  const [file, setFile] = useState(null);\r\n  //error state\r\n  const [error, setError] = useState(null);\r\n\r\n  const [selectedImg, setSelectedImg] = useState(null);\r\n  // url is produced when the file is fully uploaded to\r\n  // firestorage and progress tracks the percentage upload\r\n  const { url, progress } = useStorage(file);\r\n\r\n  //when a url has been created the file state is update to null\r\n  //which removes the render of the progress compnonet\r\n  useEffect(() => {\r\n    if (url) setFile(null);\r\n  }, [url, setFile]);\r\n\r\n  //users can only upload a png or jpeg\r\n  const types = [\"image/png\", \"image/jpeg\"];\r\n  //sets the file state of the current file selected\r\n  const handleChange = (e) => {\r\n    let selected = e.target.files[0];\r\n    if (selected && types.includes(selected.type)) {\r\n      setFile(selected);\r\n      setError(null);\r\n    } else {\r\n      setFile(null);\r\n      setError(\"Image File Can Only Be PNG/JPEG\");\r\n    }\r\n  };\r\n\r\n  const handleClickImage = (url) => {\r\n    setSelectedImg(url);\r\n  };\r\n\r\n  const handleBackDrop = (e) => {\r\n    e.stopPropagation();\r\n\r\n    setSelectedImg(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AppContext.Provider\r\n        value={{\r\n          handleChange,\r\n          error,\r\n          file,\r\n          url,\r\n          progress,\r\n          selectedImg,\r\n          setSelectedImg,\r\n          handleClickImage,\r\n          handleBackDrop,\r\n        }}\r\n      >\r\n        <Title />\r\n        <UploadForm />\r\n        <ImageGrid />\r\n        {selectedImg && <Modal />}\r\n      </AppContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}